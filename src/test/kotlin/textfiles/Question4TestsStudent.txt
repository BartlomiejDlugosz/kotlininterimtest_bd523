package textfiles

import java.util.Random
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.thread
import kotlin.test.Test
import kotlin.test.assertEquals

class Question4Tests {
    @Test
    fun concurrencyTest() {
        for (repeat in 1..20) {
            println("Repeat run $repeat")
            val initialText = "initialtext"
            val authorStrings: List<List<String>> = (0..<8).map {
                (0..<1000).map {
                    (0..it % 10).map { number -> number.toString() }.joinToString(separator = "")
                }
            }
            val expectedOutput: String =
                (initialText + authorStrings.flatten().joinToString(separator = ""))
                    .toCharArray().sortedArray().joinToString(separator = "")

            val singleStringTextFile = SingleStringTextFile(initialText)

            // TODO - complete this test
//            A ThreadSafeTextFile named threadSafeTextFile is constructed, providing thread-
//            safe access to the existing SingleStringTextFile named singleStringTextFile;
//            • Eight Authors are created, one from each of the lists of strings, each with access to
//            the text file and each with its own instance of a java.util.Random object;
//            • Eight Threads are created, one from each Author;
//            • All eight Threads are started;
//            • All eight Threads are joined
            val lock = ReentrantLock()
            val threadSafeTextFile = ThreadSafeTextFile(singleStringTextFile, lock)

            val threads = List<Thread>(8) {
                thread {
                    Author(authorStrings[it], threadSafeTextFile, Random()).run()
                }
            }

            threads.forEach { it.join() }


            assertEquals(
                expectedOutput,
                threadSafeTextFile.toString().toCharArray().sortedArray().joinToString(separator = ""),
            )
        }
    }
}
